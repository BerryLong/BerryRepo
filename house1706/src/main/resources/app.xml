<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx.xsd
	http://www.springframework.org/schema/cache
	http://www.springframework.org/schema/cache/spring-cache.xsd">
	
	<!-- 基于注解配置哪些对象要纳入IoC容器的管理 -->
	<context:component-scan base-package="com.qfedu.house">
		<context:exclude-filter type="annotation" 
				expression="org.springframework.stereotype.Controller"/>
		<context:exclude-filter type="annotation" 
				expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
	</context:component-scan>
	<context:annotation-config />
	
	<!-- 通过自动生成代理实现AOP的功能 -->
	<!-- aspectjrt / aspectjweaver -->
	<!-- <aop:aspectj-autoproxy /> -->
	
	<!-- 配置数据库连接池(DBCP2) -->
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" 
			destroy-method="close">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost:3306/house"/>
        <property name="username" value="root"/>
        <property name="password" value="123456"/>
        <property name="initialSize" value="10" />
        <property name="maxTotal" value="100" />
        <property name="maxWaitMillis" value="5000" />
    </bean>
	
	<!-- 配置Hibernate的SessionFactory -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan" value="com.qfedu.house.domain" />
		<property name="hibernateProperties">
			<value>
                hibernate.dialect=org.hibernate.dialect.MySQL57Dialect
                hibernate.show_sql=true
                hibernate.format_sql=true
                javax.persistence.validation.mode=none
            </value>
		</property>
	</bean>
	
	<!-- 配置MyBatis的SQLSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml" />
	</bean>
	
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
		<property name="basePackage" value="com.qfedu.house.mapper" />
	</bean>
	
	<!-- 配置Spring提供的Hibernate事务管理器 -->
	<bean id="transactionManager"
	 		class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<!-- 通过setter注入 注入了SessionFactory对象 -->
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 配置使用声明式事务 -->
	<!-- @Transactional -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<!-- 配置Redis缓存服务 -->
	<!-- 配置Redis连接池 -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxTotal" value="5000" />
		<property name="maxIdle" value="500" />
		<property name="maxWaitMillis" value="15000" />
	</bean>

	<!-- 配置Spring Data封装的Redis连接工厂 -->
	<bean id="redisConnectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="10.7.190.200" />
		<property name="port" value="6379" />
		<property name="password" value="1qaz2wsx" />
		<property name="poolConfig" ref="jedisPoolConfig" />
		<property name="usePool" value="true" />
	</bean>	
	
	<!-- 配置Spring Data封装的RedisTemplate -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="redisConnectionFactory" />
	</bean>
	
	
	<!-- 配置缓存管理器 -->
	<!-- spring-context-support -->
	<!-- spring-data-redis -->
	<bean id="cacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
		<constructor-arg ref="redisTemplate" />
	</bean>
	
	<!-- 配置声明式缓存服务 -->
	<cache:annotation-driven cache-manager="cacheManager" />
	
</beans>





